
package edu.toronto.cs.se.ci.aggregators;

import java.util.HashSet;
import java.util.Set;

import edu.toronto.cs.se.ci.Aggregator;
import edu.toronto.cs.se.ci.data.Opinion;
import edu.toronto.cs.se.ci.data.Result;

/**
 * Aggregates opinions where each set approximates the target set. The target set
 * is generated by taking the intersection of every opinion set.
 * 
 * <p>The quality of the result is the ratio of intersection size/union size.
 * 
 * <p>NOTE: This Aggregator ignores the trust of the input Opinions.
 * 
 * @author Michael Layzell
 *
 * @param <O> Set element type
 */
public class SetIntersectionAggregator<O, T> implements Aggregator<Set<O>, T, Double> {

	@Override
	public Result<Set<O>, Double> aggregate(Iterable<Opinion<Set<O>, T>> opinions) {
		Set<O> intersection = new HashSet<O>();
		Set<O> union = new HashSet<O>();
		
		for (Opinion<Set<O>, T> opinion : opinions) {
			Set<O> value = opinion.getValue();
			
			union.addAll(value);
			intersection.retainAll(value);
		}
		
		return new Result<Set<O>, Double>(intersection, ((double) intersection.size())/union.size());
	}

}
